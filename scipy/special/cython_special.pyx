# This file is automatically generated by generate_ufuncs.py.
# Do not edit manually!
"""
================================
Cython API for Special Functions
================================

Scalar, typed versions of many of the functions in ``scipy.special``
can be accessed directly from Cython; the complete list is given
below. The list is in the form::

    <function>: <inargs>-><outargs> [, <inargs>-><outargs> ...]

Here ``<inargs>`` and ``<outargs>`` are specified as lists of
typecodes which correspond to the following cython types:

- f: float
- d: double
- g: long double
- F: float complex
- D: double complex
- G: long double complex
- i: int
- l: long
- v: void.

Multiple pairs of ``<inargs>-><outargs>`` mean the function has
several possible signatures. For example, ``jv`` is listed as::

    jv: dd->d, dD->D,

which means that in Cython the following functions are available:

- ``double jv(double, double)``
- ``double complex jv(double, double complex)``.

The module is usable from Cython via::

    cimport scipy.special.cython_special

Available Functions
===================

- :py:func:`~scipy.special.bdtr`: iid->d, ddd->d
- :py:func:`~scipy.special.bdtrc`: iid->d, ddd->d
- :py:func:`~scipy.special.bdtri`: iid->d, ddd->d
- :py:func:`~scipy.special.bdtrik`: ddd->d
- :py:func:`~scipy.special.bdtrin`: ddd->d
- :py:func:`~scipy.special.bei`: d->d
- :py:func:`~scipy.special.beip`: d->d
- :py:func:`~scipy.special.ber`: d->d
- :py:func:`~scipy.special.berp`: d->d
- :py:func:`~scipy.special.besselpoly`: ddd->d
- :py:func:`~scipy.special.beta`: dd->d
- :py:func:`~scipy.special.betainc`: ddd->d
- :py:func:`~scipy.special.betaincinv`: ddd->d
- :py:func:`~scipy.special.betaln`: dd->d
- :py:func:`~scipy.special.binom`: dd->d
- :py:func:`~scipy.special.boxcox`: dd->d
- :py:func:`~scipy.special.boxcox1p`: dd->d
- :py:func:`~scipy.special.btdtr`: ddd->d
- :py:func:`~scipy.special.btdtri`: ddd->d
- :py:func:`~scipy.special.btdtria`: ddd->d
- :py:func:`~scipy.special.btdtrib`: ddd->d
- :py:func:`~scipy.special.cbrt`: d->d
- :py:func:`~scipy.special.chdtr`: dd->d
- :py:func:`~scipy.special.chdtrc`: dd->d
- :py:func:`~scipy.special.chdtri`: dd->d
- :py:func:`~scipy.special.chdtriv`: dd->d
- :py:func:`~scipy.special.chndtr`: ddd->d
- :py:func:`~scipy.special.chndtridf`: ddd->d
- :py:func:`~scipy.special.chndtrinc`: ddd->d
- :py:func:`~scipy.special.chndtrix`: ddd->d
- :py:func:`~scipy.special.cosdg`: d->d
- :py:func:`~scipy.special.cosm1`: d->d
- :py:func:`~scipy.special.cotdg`: d->d
- :py:func:`~scipy.special.dawsn`: d->d, D->D
- :py:func:`~scipy.special.ellipe`: d->d
- :py:func:`~scipy.special.ellipeinc`: dd->d
- :py:func:`~scipy.special.ellipkinc`: dd->d
- :py:func:`~scipy.special.ellipkm1`: d->d
- :py:func:`~scipy.special.entr`: d->d
- :py:func:`~scipy.special.erf`: d->d, D->D
- :py:func:`~scipy.special.erfc`: d->d, D->D
- :py:func:`~scipy.special.erfcx`: d->d, D->D
- :py:func:`~scipy.special.erfi`: d->d, D->D
- :py:func:`~scipy.special.eval_chebyc`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_chebys`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_chebyt`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_chebyu`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_gegenbauer`: ddd->d, ddD->D, ldd->d
- :py:func:`~scipy.special.eval_genlaguerre`: ddd->d, ddD->D, ldd->d
- :py:func:`~scipy.special.eval_hermite`: ld->d
- :py:func:`~scipy.special.eval_hermitenorm`: ld->d
- :py:func:`~scipy.special.eval_jacobi`: dddd->d, dddD->D, lddd->d
- :py:func:`~scipy.special.eval_laguerre`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_legendre`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_sh_chebyt`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_sh_chebyu`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.eval_sh_jacobi`: dddd->d, dddD->D, lddd->d
- :py:func:`~scipy.special.eval_sh_legendre`: dd->d, dD->D, ld->d
- :py:func:`~scipy.special.exp1`: d->d, D->D
- :py:func:`~scipy.special.exp10`: d->d
- :py:func:`~scipy.special.exp2`: d->d
- :py:func:`~scipy.special.expi`: d->d, D->D
- :py:func:`~scipy.special.expit`: f->f, d->d, g->g
- :py:func:`~scipy.special.expm1`: d->d, D->D
- :py:func:`~scipy.special.expn`: id->d, dd->d
- :py:func:`~scipy.special.exprel`: d->d
- :py:func:`~scipy.special.fdtr`: ddd->d
- :py:func:`~scipy.special.fdtrc`: ddd->d
- :py:func:`~scipy.special.fdtri`: ddd->d
- :py:func:`~scipy.special.fdtridfd`: ddd->d
- :py:func:`~scipy.special.gamma`: d->d, D->D
- :py:func:`~scipy.special.gammainc`: dd->d
- :py:func:`~scipy.special.gammaincc`: dd->d
- :py:func:`~scipy.special.gammainccinv`: dd->d
- :py:func:`~scipy.special.gammaincinv`: dd->d
- :py:func:`~scipy.special.gammasgn`: d->d
- :py:func:`~scipy.special.gdtr`: ddd->d
- :py:func:`~scipy.special.gdtrc`: ddd->d
- :py:func:`~scipy.special.gdtria`: ddd->d
- :py:func:`~scipy.special.gdtrib`: ddd->d
- :py:func:`~scipy.special.gdtrix`: ddd->d
- :py:func:`~scipy.special.hankel1`: dD->D
- :py:func:`~scipy.special.hankel1e`: dD->D
- :py:func:`~scipy.special.hankel2`: dD->D
- :py:func:`~scipy.special.hankel2e`: dD->D
- :py:func:`~scipy.special.huber`: dd->d
- :py:func:`~scipy.special.hyp0f1`: dd->d, dD->D
- :py:func:`~scipy.special.hyp1f1`: ddd->d, ddD->D
- :py:func:`~scipy.special.hyp2f1`: dddd->d, dddD->D
- :py:func:`~scipy.special.hyperu`: ddd->d
- :py:func:`~scipy.special.i0`: d->d
- :py:func:`~scipy.special.i0e`: d->d
- :py:func:`~scipy.special.i1`: d->d
- :py:func:`~scipy.special.i1e`: d->d
- :py:func:`~scipy.special.inv_boxcox`: dd->d
- :py:func:`~scipy.special.inv_boxcox1p`: dd->d
- :py:func:`~scipy.special.it2struve0`: d->d
- :py:func:`~scipy.special.itmodstruve0`: d->d
- :py:func:`~scipy.special.itstruve0`: d->d
- :py:func:`~scipy.special.iv`: dd->d, dD->D
- :py:func:`~scipy.special.ive`: dd->d, dD->D
- :py:func:`~scipy.special.j0`: d->d
- :py:func:`~scipy.special.j1`: d->d
- :py:func:`~scipy.special.jv`: dd->d, dD->D
- :py:func:`~scipy.special.jve`: dd->d, dD->D
- :py:func:`~scipy.special.k0`: d->d
- :py:func:`~scipy.special.k0e`: d->d
- :py:func:`~scipy.special.k1`: d->d
- :py:func:`~scipy.special.k1e`: d->d
- :py:func:`~scipy.special.kei`: d->d
- :py:func:`~scipy.special.keip`: d->d
- :py:func:`~scipy.special.ker`: d->d
- :py:func:`~scipy.special.kerp`: d->d
- :py:func:`~scipy.special.kl_div`: dd->d
- :py:func:`~scipy.special.kn`: id->d, dd->d
- :py:func:`~scipy.special.kolmogi`: d->d
- :py:func:`~scipy.special.kolmogorov`: d->d
- :py:func:`~scipy.special.kv`: dd->d, dD->D
- :py:func:`~scipy.special.kve`: dd->d, dD->D
- :py:func:`~scipy.special.log1p`: d->d, D->D
- :py:func:`~scipy.special.log_ndtr`: d->d, D->D
- :py:func:`~scipy.special.loggamma`: D->D
- :py:func:`~scipy.special.logit`: f->f, d->d, g->g
- :py:func:`~scipy.special.lpmv`: ddd->d
- :py:func:`~scipy.special.mathieu_a`: dd->d
- :py:func:`~scipy.special.mathieu_b`: dd->d
- :py:func:`~scipy.special.modstruve`: dd->d
- :py:func:`~scipy.special.nbdtr`: iid->d, ddd->d
- :py:func:`~scipy.special.nbdtrc`: iid->d, ddd->d
- :py:func:`~scipy.special.nbdtri`: iid->d, ddd->d
- :py:func:`~scipy.special.nbdtrik`: ddd->d
- :py:func:`~scipy.special.nbdtrin`: ddd->d
- :py:func:`~scipy.special.ncfdtr`: dddd->d
- :py:func:`~scipy.special.ncfdtri`: dddd->d
- :py:func:`~scipy.special.ncfdtridfd`: dddd->d
- :py:func:`~scipy.special.ncfdtridfn`: dddd->d
- :py:func:`~scipy.special.ncfdtrinc`: dddd->d
- :py:func:`~scipy.special.nctdtr`: ddd->d
- :py:func:`~scipy.special.nctdtridf`: ddd->d
- :py:func:`~scipy.special.nctdtrinc`: ddd->d
- :py:func:`~scipy.special.nctdtrit`: ddd->d
- :py:func:`~scipy.special.ndtr`: d->d, D->D
- :py:func:`~scipy.special.ndtri`: d->d
- :py:func:`~scipy.special.nrdtrimn`: ddd->d
- :py:func:`~scipy.special.nrdtrisd`: ddd->d
- :py:func:`~scipy.special.obl_cv`: ddd->d
- :py:func:`~scipy.special.pdtr`: id->d, dd->d
- :py:func:`~scipy.special.pdtrc`: id->d, dd->d
- :py:func:`~scipy.special.pdtri`: id->d, dd->d
- :py:func:`~scipy.special.pdtrik`: dd->d
- :py:func:`~scipy.special.poch`: dd->d
- :py:func:`~scipy.special.pro_cv`: ddd->d
- :py:func:`~scipy.special.pseudo_huber`: dd->d
- :py:func:`~scipy.special.psi`: d->d, D->D
- :py:func:`~scipy.special.radian`: ddd->d
- :py:func:`~scipy.special.rel_entr`: dd->d
- :py:func:`~scipy.special.rgamma`: d->d, D->D
- :py:func:`~scipy.special.round`: d->d
- :py:func:`~scipy.special.sindg`: d->d
- :py:func:`~scipy.special.smirnov`: id->d, dd->d
- :py:func:`~scipy.special.smirnovi`: id->d, dd->d
- :py:func:`~scipy.special.spence`: d->d, D->D
- :py:func:`~scipy.special.sph_harm`: iidd->D, dddd->D
- :py:func:`~scipy.special.stdtr`: dd->d
- :py:func:`~scipy.special.stdtridf`: dd->d
- :py:func:`~scipy.special.stdtrit`: dd->d
- :py:func:`~scipy.special.struve`: dd->d
- :py:func:`~scipy.special.tandg`: d->d
- :py:func:`~scipy.special.tklmbda`: dd->d
- :py:func:`~scipy.special.wofz`: D->D
- :py:func:`~scipy.special.xlog1py`: dd->d, DD->D
- :py:func:`~scipy.special.xlogy`: dd->d, DD->D
- :py:func:`~scipy.special.y0`: d->d
- :py:func:`~scipy.special.y1`: d->d
- :py:func:`~scipy.special.yn`: id->d, dd->d
- :py:func:`~scipy.special.yv`: dd->d, dD->D
- :py:func:`~scipy.special.yve`: dd->d, dD->D
- :py:func:`~scipy.special.zetac`: d->d
"""
cimport numpy as np
from numpy cimport (
    npy_float, npy_double, npy_longdouble,
    npy_cfloat, npy_cdouble, npy_clongdouble,
    npy_int, npy_long,
    NPY_FLOAT, NPY_DOUBLE, NPY_LONGDOUBLE,
    NPY_CFLOAT, NPY_CDOUBLE, NPY_CLONGDOUBLE,
    NPY_INT, NPY_LONG)

cdef extern from "numpy/ufuncobject.h":
    int PyUFunc_getfperr() nogil

cdef public int wrap_PyUFunc_getfperr() nogil:
    """
    Call PyUFunc_getfperr in a context where PyUFunc_API array is initialized;
    this avoids messing with the UNIQUE_SYMBOL #defines
    """
    return PyUFunc_getfperr()

cdef extern from "numpy/npy_math.h":
    double NPY_NAN

cimport sf_error
cimport _complexstuff
cimport scipy.special._ufuncs_cxx
from . import _ufuncs

ctypedef long double long_double
ctypedef float complex float_complex
ctypedef double complex double_complex
ctypedef long double complex long_double_complex


cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_bdtr "bdtr"(npy_int, npy_int, npy_double)nogil
from _legacy cimport bdtr_unsafe as _func_bdtr_unsafe
ctypedef double _proto_bdtr_unsafe_t(double, double, double) nogil
cdef _proto_bdtr_unsafe_t *_proto_bdtr_unsafe_t_var = &_func_bdtr_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_bdtrc "bdtrc"(npy_int, npy_int, npy_double)nogil
from _legacy cimport bdtrc_unsafe as _func_bdtrc_unsafe
ctypedef double _proto_bdtrc_unsafe_t(double, double, double) nogil
cdef _proto_bdtrc_unsafe_t *_proto_bdtrc_unsafe_t_var = &_func_bdtrc_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_bdtri "bdtri"(npy_int, npy_int, npy_double)nogil
from _legacy cimport bdtri_unsafe as _func_bdtri_unsafe
ctypedef double _proto_bdtri_unsafe_t(double, double, double) nogil
cdef _proto_bdtri_unsafe_t *_proto_bdtri_unsafe_t_var = &_func_bdtri_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfbin2_wrap "cdfbin2_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfbin3_wrap "cdfbin3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_bei_wrap "bei_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_beip_wrap "beip_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ber_wrap "ber_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_berp_wrap "berp_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_besselpoly "besselpoly"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_beta "beta"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_incbet "incbet"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_incbi "incbi"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_lbeta "lbeta"(npy_double, npy_double)nogil
from orthogonal_eval cimport binom as _func_binom
ctypedef double _proto_binom_t(double, double) nogil
cdef _proto_binom_t *_proto_binom_t_var = &_func_binom
from _boxcox cimport boxcox as _func_boxcox
ctypedef double _proto_boxcox_t(double, double) nogil
cdef _proto_boxcox_t *_proto_boxcox_t_var = &_func_boxcox
from _boxcox cimport boxcox1p as _func_boxcox1p
ctypedef double _proto_boxcox1p_t(double, double) nogil
cdef _proto_boxcox1p_t *_proto_boxcox1p_t_var = &_func_boxcox1p
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_btdtr "btdtr"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_incbi "incbi"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfbet3_wrap "cdfbet3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfbet4_wrap "cdfbet4_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbrt "cbrt"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_chdtr "chdtr"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_chdtrc "chdtrc"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_chdtri "chdtri"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfchi3_wrap "cdfchi3_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfchn1_wrap "cdfchn1_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfchn3_wrap "cdfchn3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfchn4_wrap "cdfchn4_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfchn2_wrap "cdfchn2_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cosdg "cosdg"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cosm1 "cosm1"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cotdg "cotdg"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ellpe "ellpe"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ellie "ellie"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ellik "ellik"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ellpk "ellpk"(npy_double)nogil
from _convex_analysis cimport entr as _func_entr
ctypedef double _proto_entr_t(double) nogil
cdef _proto_entr_t *_proto_entr_t_var = &_func_entr
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_erf "erf"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_erfc "erfc"(npy_double)nogil
from orthogonal_eval cimport eval_chebyc as _func_eval_chebyc
ctypedef double _proto_eval_chebyc_double__t(double, double) nogil
cdef _proto_eval_chebyc_double__t *_proto_eval_chebyc_double__t_var = &_func_eval_chebyc[double]
from orthogonal_eval cimport eval_chebyc as _func_eval_chebyc
ctypedef double complex _proto_eval_chebyc_double_complex__t(double, double complex) nogil
cdef _proto_eval_chebyc_double_complex__t *_proto_eval_chebyc_double_complex__t_var = &_func_eval_chebyc[double_complex]
from orthogonal_eval cimport eval_chebyc_l as _func_eval_chebyc_l
ctypedef double _proto_eval_chebyc_l_t(long, double) nogil
cdef _proto_eval_chebyc_l_t *_proto_eval_chebyc_l_t_var = &_func_eval_chebyc_l
from orthogonal_eval cimport eval_chebys as _func_eval_chebys
ctypedef double _proto_eval_chebys_double__t(double, double) nogil
cdef _proto_eval_chebys_double__t *_proto_eval_chebys_double__t_var = &_func_eval_chebys[double]
from orthogonal_eval cimport eval_chebys as _func_eval_chebys
ctypedef double complex _proto_eval_chebys_double_complex__t(double, double complex) nogil
cdef _proto_eval_chebys_double_complex__t *_proto_eval_chebys_double_complex__t_var = &_func_eval_chebys[double_complex]
from orthogonal_eval cimport eval_chebys_l as _func_eval_chebys_l
ctypedef double _proto_eval_chebys_l_t(long, double) nogil
cdef _proto_eval_chebys_l_t *_proto_eval_chebys_l_t_var = &_func_eval_chebys_l
from orthogonal_eval cimport eval_chebyt as _func_eval_chebyt
ctypedef double _proto_eval_chebyt_double__t(double, double) nogil
cdef _proto_eval_chebyt_double__t *_proto_eval_chebyt_double__t_var = &_func_eval_chebyt[double]
from orthogonal_eval cimport eval_chebyt as _func_eval_chebyt
ctypedef double complex _proto_eval_chebyt_double_complex__t(double, double complex) nogil
cdef _proto_eval_chebyt_double_complex__t *_proto_eval_chebyt_double_complex__t_var = &_func_eval_chebyt[double_complex]
from orthogonal_eval cimport eval_chebyt_l as _func_eval_chebyt_l
ctypedef double _proto_eval_chebyt_l_t(long, double) nogil
cdef _proto_eval_chebyt_l_t *_proto_eval_chebyt_l_t_var = &_func_eval_chebyt_l
from orthogonal_eval cimport eval_chebyu as _func_eval_chebyu
ctypedef double _proto_eval_chebyu_double__t(double, double) nogil
cdef _proto_eval_chebyu_double__t *_proto_eval_chebyu_double__t_var = &_func_eval_chebyu[double]
from orthogonal_eval cimport eval_chebyu as _func_eval_chebyu
ctypedef double complex _proto_eval_chebyu_double_complex__t(double, double complex) nogil
cdef _proto_eval_chebyu_double_complex__t *_proto_eval_chebyu_double_complex__t_var = &_func_eval_chebyu[double_complex]
from orthogonal_eval cimport eval_chebyu_l as _func_eval_chebyu_l
ctypedef double _proto_eval_chebyu_l_t(long, double) nogil
cdef _proto_eval_chebyu_l_t *_proto_eval_chebyu_l_t_var = &_func_eval_chebyu_l
from orthogonal_eval cimport eval_gegenbauer as _func_eval_gegenbauer
ctypedef double _proto_eval_gegenbauer_double__t(double, double, double) nogil
cdef _proto_eval_gegenbauer_double__t *_proto_eval_gegenbauer_double__t_var = &_func_eval_gegenbauer[double]
from orthogonal_eval cimport eval_gegenbauer as _func_eval_gegenbauer
ctypedef double complex _proto_eval_gegenbauer_double_complex__t(double, double, double complex) nogil
cdef _proto_eval_gegenbauer_double_complex__t *_proto_eval_gegenbauer_double_complex__t_var = &_func_eval_gegenbauer[double_complex]
from orthogonal_eval cimport eval_gegenbauer_l as _func_eval_gegenbauer_l
ctypedef double _proto_eval_gegenbauer_l_t(long, double, double) nogil
cdef _proto_eval_gegenbauer_l_t *_proto_eval_gegenbauer_l_t_var = &_func_eval_gegenbauer_l
from orthogonal_eval cimport eval_genlaguerre as _func_eval_genlaguerre
ctypedef double _proto_eval_genlaguerre_double__t(double, double, double) nogil
cdef _proto_eval_genlaguerre_double__t *_proto_eval_genlaguerre_double__t_var = &_func_eval_genlaguerre[double]
from orthogonal_eval cimport eval_genlaguerre as _func_eval_genlaguerre
ctypedef double complex _proto_eval_genlaguerre_double_complex__t(double, double, double complex) nogil
cdef _proto_eval_genlaguerre_double_complex__t *_proto_eval_genlaguerre_double_complex__t_var = &_func_eval_genlaguerre[double_complex]
from orthogonal_eval cimport eval_genlaguerre_l as _func_eval_genlaguerre_l
ctypedef double _proto_eval_genlaguerre_l_t(long, double, double) nogil
cdef _proto_eval_genlaguerre_l_t *_proto_eval_genlaguerre_l_t_var = &_func_eval_genlaguerre_l
from orthogonal_eval cimport eval_hermite as _func_eval_hermite
ctypedef double _proto_eval_hermite_t(long, double) nogil
cdef _proto_eval_hermite_t *_proto_eval_hermite_t_var = &_func_eval_hermite
from orthogonal_eval cimport eval_hermitenorm as _func_eval_hermitenorm
ctypedef double _proto_eval_hermitenorm_t(long, double) nogil
cdef _proto_eval_hermitenorm_t *_proto_eval_hermitenorm_t_var = &_func_eval_hermitenorm
from orthogonal_eval cimport eval_jacobi as _func_eval_jacobi
ctypedef double _proto_eval_jacobi_double__t(double, double, double, double) nogil
cdef _proto_eval_jacobi_double__t *_proto_eval_jacobi_double__t_var = &_func_eval_jacobi[double]
from orthogonal_eval cimport eval_jacobi as _func_eval_jacobi
ctypedef double complex _proto_eval_jacobi_double_complex__t(double, double, double, double complex) nogil
cdef _proto_eval_jacobi_double_complex__t *_proto_eval_jacobi_double_complex__t_var = &_func_eval_jacobi[double_complex]
from orthogonal_eval cimport eval_jacobi_l as _func_eval_jacobi_l
ctypedef double _proto_eval_jacobi_l_t(long, double, double, double) nogil
cdef _proto_eval_jacobi_l_t *_proto_eval_jacobi_l_t_var = &_func_eval_jacobi_l
from orthogonal_eval cimport eval_laguerre as _func_eval_laguerre
ctypedef double _proto_eval_laguerre_double__t(double, double) nogil
cdef _proto_eval_laguerre_double__t *_proto_eval_laguerre_double__t_var = &_func_eval_laguerre[double]
from orthogonal_eval cimport eval_laguerre as _func_eval_laguerre
ctypedef double complex _proto_eval_laguerre_double_complex__t(double, double complex) nogil
cdef _proto_eval_laguerre_double_complex__t *_proto_eval_laguerre_double_complex__t_var = &_func_eval_laguerre[double_complex]
from orthogonal_eval cimport eval_laguerre_l as _func_eval_laguerre_l
ctypedef double _proto_eval_laguerre_l_t(long, double) nogil
cdef _proto_eval_laguerre_l_t *_proto_eval_laguerre_l_t_var = &_func_eval_laguerre_l
from orthogonal_eval cimport eval_legendre as _func_eval_legendre
ctypedef double _proto_eval_legendre_double__t(double, double) nogil
cdef _proto_eval_legendre_double__t *_proto_eval_legendre_double__t_var = &_func_eval_legendre[double]
from orthogonal_eval cimport eval_legendre as _func_eval_legendre
ctypedef double complex _proto_eval_legendre_double_complex__t(double, double complex) nogil
cdef _proto_eval_legendre_double_complex__t *_proto_eval_legendre_double_complex__t_var = &_func_eval_legendre[double_complex]
from orthogonal_eval cimport eval_legendre_l as _func_eval_legendre_l
ctypedef double _proto_eval_legendre_l_t(long, double) nogil
cdef _proto_eval_legendre_l_t *_proto_eval_legendre_l_t_var = &_func_eval_legendre_l
from orthogonal_eval cimport eval_sh_chebyt as _func_eval_sh_chebyt
ctypedef double _proto_eval_sh_chebyt_double__t(double, double) nogil
cdef _proto_eval_sh_chebyt_double__t *_proto_eval_sh_chebyt_double__t_var = &_func_eval_sh_chebyt[double]
from orthogonal_eval cimport eval_sh_chebyt as _func_eval_sh_chebyt
ctypedef double complex _proto_eval_sh_chebyt_double_complex__t(double, double complex) nogil
cdef _proto_eval_sh_chebyt_double_complex__t *_proto_eval_sh_chebyt_double_complex__t_var = &_func_eval_sh_chebyt[double_complex]
from orthogonal_eval cimport eval_sh_chebyt_l as _func_eval_sh_chebyt_l
ctypedef double _proto_eval_sh_chebyt_l_t(long, double) nogil
cdef _proto_eval_sh_chebyt_l_t *_proto_eval_sh_chebyt_l_t_var = &_func_eval_sh_chebyt_l
from orthogonal_eval cimport eval_sh_chebyu as _func_eval_sh_chebyu
ctypedef double _proto_eval_sh_chebyu_double__t(double, double) nogil
cdef _proto_eval_sh_chebyu_double__t *_proto_eval_sh_chebyu_double__t_var = &_func_eval_sh_chebyu[double]
from orthogonal_eval cimport eval_sh_chebyu as _func_eval_sh_chebyu
ctypedef double complex _proto_eval_sh_chebyu_double_complex__t(double, double complex) nogil
cdef _proto_eval_sh_chebyu_double_complex__t *_proto_eval_sh_chebyu_double_complex__t_var = &_func_eval_sh_chebyu[double_complex]
from orthogonal_eval cimport eval_sh_chebyu_l as _func_eval_sh_chebyu_l
ctypedef double _proto_eval_sh_chebyu_l_t(long, double) nogil
cdef _proto_eval_sh_chebyu_l_t *_proto_eval_sh_chebyu_l_t_var = &_func_eval_sh_chebyu_l
from orthogonal_eval cimport eval_sh_jacobi as _func_eval_sh_jacobi
ctypedef double _proto_eval_sh_jacobi_double__t(double, double, double, double) nogil
cdef _proto_eval_sh_jacobi_double__t *_proto_eval_sh_jacobi_double__t_var = &_func_eval_sh_jacobi[double]
from orthogonal_eval cimport eval_sh_jacobi as _func_eval_sh_jacobi
ctypedef double complex _proto_eval_sh_jacobi_double_complex__t(double, double, double, double complex) nogil
cdef _proto_eval_sh_jacobi_double_complex__t *_proto_eval_sh_jacobi_double_complex__t_var = &_func_eval_sh_jacobi[double_complex]
from orthogonal_eval cimport eval_sh_jacobi_l as _func_eval_sh_jacobi_l
ctypedef double _proto_eval_sh_jacobi_l_t(long, double, double, double) nogil
cdef _proto_eval_sh_jacobi_l_t *_proto_eval_sh_jacobi_l_t_var = &_func_eval_sh_jacobi_l
from orthogonal_eval cimport eval_sh_legendre as _func_eval_sh_legendre
ctypedef double _proto_eval_sh_legendre_double__t(double, double) nogil
cdef _proto_eval_sh_legendre_double__t *_proto_eval_sh_legendre_double__t_var = &_func_eval_sh_legendre[double]
from orthogonal_eval cimport eval_sh_legendre as _func_eval_sh_legendre
ctypedef double complex _proto_eval_sh_legendre_double_complex__t(double, double complex) nogil
cdef _proto_eval_sh_legendre_double_complex__t *_proto_eval_sh_legendre_double_complex__t_var = &_func_eval_sh_legendre[double_complex]
from orthogonal_eval cimport eval_sh_legendre_l as _func_eval_sh_legendre_l
ctypedef double _proto_eval_sh_legendre_l_t(long, double) nogil
cdef _proto_eval_sh_legendre_l_t *_proto_eval_sh_legendre_l_t_var = &_func_eval_sh_legendre_l
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_exp1_wrap "exp1_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cexp1_wrap "cexp1_wrap"(npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_exp10 "exp10"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_exp2 "exp2"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_expi_wrap "expi_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cexpi_wrap "cexpi_wrap"(npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_float _func_expitf "expitf"(npy_float)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_expit "expit"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_longdouble _func_expitl "expitl"(npy_longdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_expm1 "expm1"(npy_double)nogil
from _cunity cimport cexpm1 as _func_cexpm1
ctypedef double complex _proto_cexpm1_t(double complex) nogil
cdef _proto_cexpm1_t *_proto_cexpm1_t_var = &_func_cexpm1
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_expn "expn"(npy_int, npy_double)nogil
from _legacy cimport expn_unsafe as _func_expn_unsafe
ctypedef double _proto_expn_unsafe_t(double, double) nogil
cdef _proto_expn_unsafe_t *_proto_expn_unsafe_t_var = &_func_expn_unsafe
from _exprel cimport exprel as _func_exprel
ctypedef double _proto_exprel_t(double) nogil
cdef _proto_exprel_t *_proto_exprel_t_var = &_func_exprel
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_fdtr "fdtr"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_fdtrc "fdtrc"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_fdtri "fdtri"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdff4_wrap "cdff4_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_Gamma "Gamma"(npy_double)nogil
from _loggamma cimport cgamma as _func_cgamma
ctypedef double complex _proto_cgamma_t(double complex) nogil
cdef _proto_cgamma_t *_proto_cgamma_t_var = &_func_cgamma
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_igam "igam"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_igamc "igamc"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_igami "igami"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_gammaincinv "gammaincinv"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_gammasgn "gammasgn"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_gdtr "gdtr"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_gdtrc "gdtrc"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfgam4_wrap "cdfgam4_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfgam3_wrap "cdfgam3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfgam2_wrap "cdfgam2_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesh_wrap1 "cbesh_wrap1"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesh_wrap1_e "cbesh_wrap1_e"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesh_wrap2 "cbesh_wrap2"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesh_wrap2_e "cbesh_wrap2_e"(npy_double, npy_cdouble)nogil
from _convex_analysis cimport huber as _func_huber
ctypedef double _proto_huber_t(double, double) nogil
cdef _proto_huber_t *_proto_huber_t_var = &_func_huber
from _hyp0f1 cimport _hyp0f1_real as _func__hyp0f1_real
ctypedef double _proto__hyp0f1_real_t(double, double) nogil
cdef _proto__hyp0f1_real_t *_proto__hyp0f1_real_t_var = &_func__hyp0f1_real
from _hyp0f1 cimport _hyp0f1_cmplx as _func__hyp0f1_cmplx
ctypedef double complex _proto__hyp0f1_cmplx_t(double, double complex) nogil
cdef _proto__hyp0f1_cmplx_t *_proto__hyp0f1_cmplx_t_var = &_func__hyp0f1_cmplx
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_hyp1f1_wrap "hyp1f1_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_chyp1f1_wrap "chyp1f1_wrap"(npy_double, npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_hyp2f1 "hyp2f1"(npy_double, npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_chyp2f1_wrap "chyp2f1_wrap"(npy_double, npy_double, npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_hypU_wrap "hypU_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_i0 "i0"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_i0e "i0e"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_i1 "i1"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_i1e "i1e"(npy_double)nogil
from _boxcox cimport inv_boxcox as _func_inv_boxcox
ctypedef double _proto_inv_boxcox_t(double, double) nogil
cdef _proto_inv_boxcox_t *_proto_inv_boxcox_t_var = &_func_inv_boxcox
from _boxcox cimport inv_boxcox1p as _func_inv_boxcox1p
ctypedef double _proto_inv_boxcox1p_t(double, double) nogil
cdef _proto_inv_boxcox1p_t *_proto_inv_boxcox1p_t_var = &_func_inv_boxcox1p
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_it2struve0_wrap "it2struve0_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_itmodstruve0_wrap "itmodstruve0_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_itstruve0_wrap "itstruve0_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_iv "iv"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesi_wrap "cbesi_wrap"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesi_wrap_e_real "cbesi_wrap_e_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesi_wrap_e "cbesi_wrap_e"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_j0 "j0"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_j1 "j1"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesj_wrap_real "cbesj_wrap_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesj_wrap "cbesj_wrap"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesj_wrap_e_real "cbesj_wrap_e_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesj_wrap_e "cbesj_wrap_e"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_k0 "k0"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_k0e "k0e"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_k1 "k1"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_k1e "k1e"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_kei_wrap "kei_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_keip_wrap "keip_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ker_wrap "ker_wrap"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_kerp_wrap "kerp_wrap"(npy_double)nogil
from _convex_analysis cimport kl_div as _func_kl_div
ctypedef double _proto_kl_div_t(double, double) nogil
cdef _proto_kl_div_t *_proto_kl_div_t_var = &_func_kl_div
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesk_wrap_real_int "cbesk_wrap_real_int"(npy_int, npy_double)nogil
from _legacy cimport kn_unsafe as _func_kn_unsafe
ctypedef double _proto_kn_unsafe_t(double, double) nogil
cdef _proto_kn_unsafe_t *_proto_kn_unsafe_t_var = &_func_kn_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_kolmogi "kolmogi"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_kolmogorov "kolmogorov"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesk_wrap_real "cbesk_wrap_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesk_wrap "cbesk_wrap"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesk_wrap_e_real "cbesk_wrap_e_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesk_wrap_e "cbesk_wrap_e"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_log1p "log1p"(npy_double)nogil
from _cunity cimport clog1p as _func_clog1p
ctypedef double complex _proto_clog1p_t(double complex) nogil
cdef _proto_clog1p_t *_proto_clog1p_t_var = &_func_clog1p
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_log_ndtr "log_ndtr"(npy_double)nogil
from _loggamma cimport loggamma as _func_loggamma
ctypedef double complex _proto_loggamma_t(double complex) nogil
cdef _proto_loggamma_t *_proto_loggamma_t_var = &_func_loggamma
cdef extern from "_ufuncs_defs.h":
    cdef npy_float _func_logitf "logitf"(npy_float)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_logit "logit"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_longdouble _func_logitl "logitl"(npy_longdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_pmv_wrap "pmv_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cem_cva_wrap "cem_cva_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_sem_cva_wrap "sem_cva_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_struve_l "struve_l"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_nbdtr "nbdtr"(npy_int, npy_int, npy_double)nogil
from _legacy cimport nbdtr_unsafe as _func_nbdtr_unsafe
ctypedef double _proto_nbdtr_unsafe_t(double, double, double) nogil
cdef _proto_nbdtr_unsafe_t *_proto_nbdtr_unsafe_t_var = &_func_nbdtr_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_nbdtrc "nbdtrc"(npy_int, npy_int, npy_double)nogil
from _legacy cimport nbdtrc_unsafe as _func_nbdtrc_unsafe
ctypedef double _proto_nbdtrc_unsafe_t(double, double, double) nogil
cdef _proto_nbdtrc_unsafe_t *_proto_nbdtrc_unsafe_t_var = &_func_nbdtrc_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_nbdtri "nbdtri"(npy_int, npy_int, npy_double)nogil
from _legacy cimport nbdtri_unsafe as _func_nbdtri_unsafe
ctypedef double _proto_nbdtri_unsafe_t(double, double, double) nogil
cdef _proto_nbdtri_unsafe_t *_proto_nbdtri_unsafe_t_var = &_func_nbdtri_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfnbn2_wrap "cdfnbn2_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfnbn3_wrap "cdfnbn3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdffnc1_wrap "cdffnc1_wrap"(npy_double, npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdffnc2_wrap "cdffnc2_wrap"(npy_double, npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdffnc4_wrap "cdffnc4_wrap"(npy_double, npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdffnc3_wrap "cdffnc3_wrap"(npy_double, npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdffnc5_wrap "cdffnc5_wrap"(npy_double, npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdftnc1_wrap "cdftnc1_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdftnc3_wrap "cdftnc3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdftnc4_wrap "cdftnc4_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdftnc2_wrap "cdftnc2_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ndtr "ndtr"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_ndtri "ndtri"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfnor3_wrap "cdfnor3_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfnor4_wrap "cdfnor4_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_oblate_segv_wrap "oblate_segv_wrap"(npy_double, npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_pdtr "pdtr"(npy_int, npy_double)nogil
from _legacy cimport pdtr_unsafe as _func_pdtr_unsafe
ctypedef double _proto_pdtr_unsafe_t(double, double) nogil
cdef _proto_pdtr_unsafe_t *_proto_pdtr_unsafe_t_var = &_func_pdtr_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_pdtrc "pdtrc"(npy_int, npy_double)nogil
from _legacy cimport pdtrc_unsafe as _func_pdtrc_unsafe
ctypedef double _proto_pdtrc_unsafe_t(double, double) nogil
cdef _proto_pdtrc_unsafe_t *_proto_pdtrc_unsafe_t_var = &_func_pdtrc_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_pdtri "pdtri"(npy_int, npy_double)nogil
from _legacy cimport pdtri_unsafe as _func_pdtri_unsafe
ctypedef double _proto_pdtri_unsafe_t(double, double) nogil
cdef _proto_pdtri_unsafe_t *_proto_pdtri_unsafe_t_var = &_func_pdtri_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdfpoi2_wrap "cdfpoi2_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_poch "poch"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_prolate_segv_wrap "prolate_segv_wrap"(npy_double, npy_double, npy_double)nogil
from _convex_analysis cimport pseudo_huber as _func_pseudo_huber
ctypedef double _proto_pseudo_huber_t(double, double) nogil
cdef _proto_pseudo_huber_t *_proto_pseudo_huber_t_var = &_func_pseudo_huber
from _digamma cimport digamma as _func_digamma
ctypedef double _proto_digamma_t(double) nogil
cdef _proto_digamma_t *_proto_digamma_t_var = &_func_digamma
from _digamma cimport cdigamma as _func_cdigamma
ctypedef double complex _proto_cdigamma_t(double complex) nogil
cdef _proto_cdigamma_t *_proto_cdigamma_t_var = &_func_cdigamma
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_radian "radian"(npy_double, npy_double, npy_double)nogil
from _convex_analysis cimport rel_entr as _func_rel_entr
ctypedef double _proto_rel_entr_t(double, double) nogil
cdef _proto_rel_entr_t *_proto_rel_entr_t_var = &_func_rel_entr
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_rgamma "rgamma"(npy_double)nogil
from _loggamma cimport crgamma as _func_crgamma
ctypedef double complex _proto_crgamma_t(double complex) nogil
cdef _proto_crgamma_t *_proto_crgamma_t_var = &_func_crgamma
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_round "round"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_sindg "sindg"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_smirnov "smirnov"(npy_int, npy_double)nogil
from _legacy cimport smirnov_unsafe as _func_smirnov_unsafe
ctypedef double _proto_smirnov_unsafe_t(double, double) nogil
cdef _proto_smirnov_unsafe_t *_proto_smirnov_unsafe_t_var = &_func_smirnov_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_smirnovi "smirnovi"(npy_int, npy_double)nogil
from _legacy cimport smirnovi_unsafe as _func_smirnovi_unsafe
ctypedef double _proto_smirnovi_unsafe_t(double, double) nogil
cdef _proto_smirnovi_unsafe_t *_proto_smirnovi_unsafe_t_var = &_func_smirnovi_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_spence "spence"(npy_double)nogil
from _spence cimport cspence as _func_cspence
ctypedef double complex _proto_cspence_t(double complex) nogil
cdef _proto_cspence_t *_proto_cspence_t_var = &_func_cspence
from sph_harm cimport sph_harmonic as _func_sph_harmonic
ctypedef double complex _proto_sph_harmonic_t(int, int, double, double) nogil
cdef _proto_sph_harmonic_t *_proto_sph_harmonic_t_var = &_func_sph_harmonic
from _legacy cimport sph_harmonic_unsafe as _func_sph_harmonic_unsafe
ctypedef double complex _proto_sph_harmonic_unsafe_t(double, double, double, double) nogil
cdef _proto_sph_harmonic_unsafe_t *_proto_sph_harmonic_unsafe_t_var = &_func_sph_harmonic_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdft1_wrap "cdft1_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdft3_wrap "cdft3_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cdft2_wrap "cdft2_wrap"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_struve_h "struve_h"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_tandg "tandg"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_tukeylambdacdf "tukeylambdacdf"(npy_double, npy_double)nogil
from _xlogy cimport xlog1py as _func_xlog1py
ctypedef double _proto_xlog1py_double__t(double, double) nogil
cdef _proto_xlog1py_double__t *_proto_xlog1py_double__t_var = &_func_xlog1py[double]
from _xlogy cimport xlog1py as _func_xlog1py
ctypedef double complex _proto_xlog1py_double_complex__t(double complex, double complex) nogil
cdef _proto_xlog1py_double_complex__t *_proto_xlog1py_double_complex__t_var = &_func_xlog1py[double_complex]
from _xlogy cimport xlogy as _func_xlogy
ctypedef double _proto_xlogy_double__t(double, double) nogil
cdef _proto_xlogy_double__t *_proto_xlogy_double__t_var = &_func_xlogy[double]
from _xlogy cimport xlogy as _func_xlogy
ctypedef double complex _proto_xlogy_double_complex__t(double complex, double complex) nogil
cdef _proto_xlogy_double_complex__t *_proto_xlogy_double_complex__t_var = &_func_xlogy[double_complex]
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_y0 "y0"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_y1 "y1"(npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_yn "yn"(npy_int, npy_double)nogil
from _legacy cimport yn_unsafe as _func_yn_unsafe
ctypedef double _proto_yn_unsafe_t(double, double) nogil
cdef _proto_yn_unsafe_t *_proto_yn_unsafe_t_var = &_func_yn_unsafe
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesy_wrap_real "cbesy_wrap_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesy_wrap "cbesy_wrap"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_cbesy_wrap_e_real "cbesy_wrap_e_real"(npy_double, npy_double)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_cdouble _func_cbesy_wrap_e "cbesy_wrap_e"(npy_double, npy_cdouble)nogil
cdef extern from "_ufuncs_defs.h":
    cdef npy_double _func_zetac "zetac"(npy_double)nogil

cpdef double bdtr(di_number_t x0, di_number_t x1, double x2) nogil:
    """See the documentation for scipy.special.bdtr"""
    cdef double res
    if di_number_t is int:
        res = _func_bdtr(x0, x1, x2)
    elif di_number_t is double:
        res = _func_bdtr_unsafe(x0, x1, x2)
    else:
        res = NPY_NAN
    return res

cpdef double bdtrc(di_number_t x0, di_number_t x1, double x2) nogil:
    """See the documentation for scipy.special.bdtrc"""
    cdef double res
    if di_number_t is int:
        res = _func_bdtrc(x0, x1, x2)
    elif di_number_t is double:
        res = _func_bdtrc_unsafe(x0, x1, x2)
    else:
        res = NPY_NAN
    return res

cpdef double bdtri(di_number_t x0, di_number_t x1, double x2) nogil:
    """See the documentation for scipy.special.bdtri"""
    cdef double res
    if di_number_t is int:
        res = _func_bdtri(x0, x1, x2)
    elif di_number_t is double:
        res = _func_bdtri_unsafe(x0, x1, x2)
    else:
        res = NPY_NAN
    return res

cpdef double bdtrik(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.bdtrik"""
    cdef double res
    res = _func_cdfbin2_wrap(x0, x1, x2)
    return res

cpdef double bdtrin(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.bdtrin"""
    cdef double res
    res = _func_cdfbin3_wrap(x0, x1, x2)
    return res

cpdef double bei(double x0) nogil:
    """See the documentation for scipy.special.bei"""
    cdef double res
    res = _func_bei_wrap(x0)
    return res

cpdef double beip(double x0) nogil:
    """See the documentation for scipy.special.beip"""
    cdef double res
    res = _func_beip_wrap(x0)
    return res

cpdef double ber(double x0) nogil:
    """See the documentation for scipy.special.ber"""
    cdef double res
    res = _func_ber_wrap(x0)
    return res

cpdef double berp(double x0) nogil:
    """See the documentation for scipy.special.berp"""
    cdef double res
    res = _func_berp_wrap(x0)
    return res

cpdef double besselpoly(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.besselpoly"""
    cdef double res
    res = _func_besselpoly(x0, x1, x2)
    return res

cpdef double beta(double x0, double x1) nogil:
    """See the documentation for scipy.special.beta"""
    cdef double res
    res = _func_beta(x0, x1)
    return res

cpdef double betainc(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.betainc"""
    cdef double res
    res = _func_incbet(x0, x1, x2)
    return res

cpdef double betaincinv(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.betaincinv"""
    cdef double res
    res = _func_incbi(x0, x1, x2)
    return res

cpdef double betaln(double x0, double x1) nogil:
    """See the documentation for scipy.special.betaln"""
    cdef double res
    res = _func_lbeta(x0, x1)
    return res

cpdef double binom(double x0, double x1) nogil:
    """See the documentation for scipy.special.binom"""
    cdef double res
    res = _func_binom(x0, x1)
    return res

cpdef double boxcox(double x0, double x1) nogil:
    """See the documentation for scipy.special.boxcox"""
    cdef double res
    res = _func_boxcox(x0, x1)
    return res

cpdef double boxcox1p(double x0, double x1) nogil:
    """See the documentation for scipy.special.boxcox1p"""
    cdef double res
    res = _func_boxcox1p(x0, x1)
    return res

cpdef double btdtr(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.btdtr"""
    cdef double res
    res = _func_btdtr(x0, x1, x2)
    return res

cpdef double btdtri(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.btdtri"""
    cdef double res
    res = _func_incbi(x0, x1, x2)
    return res

cpdef double btdtria(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.btdtria"""
    cdef double res
    res = _func_cdfbet3_wrap(x0, x1, x2)
    return res

cpdef double btdtrib(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.btdtrib"""
    cdef double res
    res = _func_cdfbet4_wrap(x0, x1, x2)
    return res

cpdef double cbrt(double x0) nogil:
    """See the documentation for scipy.special.cbrt"""
    cdef double res
    res = _func_cbrt(x0)
    return res

cpdef double chdtr(double x0, double x1) nogil:
    """See the documentation for scipy.special.chdtr"""
    cdef double res
    res = _func_chdtr(x0, x1)
    return res

cpdef double chdtrc(double x0, double x1) nogil:
    """See the documentation for scipy.special.chdtrc"""
    cdef double res
    res = _func_chdtrc(x0, x1)
    return res

cpdef double chdtri(double x0, double x1) nogil:
    """See the documentation for scipy.special.chdtri"""
    cdef double res
    res = _func_chdtri(x0, x1)
    return res

cpdef double chdtriv(double x0, double x1) nogil:
    """See the documentation for scipy.special.chdtriv"""
    cdef double res
    res = _func_cdfchi3_wrap(x0, x1)
    return res

cpdef double chndtr(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.chndtr"""
    cdef double res
    res = _func_cdfchn1_wrap(x0, x1, x2)
    return res

cpdef double chndtridf(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.chndtridf"""
    cdef double res
    res = _func_cdfchn3_wrap(x0, x1, x2)
    return res

cpdef double chndtrinc(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.chndtrinc"""
    cdef double res
    res = _func_cdfchn4_wrap(x0, x1, x2)
    return res

cpdef double chndtrix(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.chndtrix"""
    cdef double res
    res = _func_cdfchn2_wrap(x0, x1, x2)
    return res

cpdef double cosdg(double x0) nogil:
    """See the documentation for scipy.special.cosdg"""
    cdef double res
    res = _func_cosdg(x0)
    return res

cpdef double cosm1(double x0) nogil:
    """See the documentation for scipy.special.cosm1"""
    cdef double res
    res = _func_cosm1(x0)
    return res

cpdef double cotdg(double x0) nogil:
    """See the documentation for scipy.special.cotdg"""
    cdef double res
    res = _func_cotdg(x0)
    return res

cpdef Dd_number_t dawsn(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.dawsn"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = (<double(*)(double) nogil>scipy.special._ufuncs_cxx._export_faddeeva_dawsn)(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_dawsn_complex)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double ellipe(double x0) nogil:
    """See the documentation for scipy.special.ellipe"""
    cdef double res
    res = _func_ellpe(x0)
    return res

cpdef double ellipeinc(double x0, double x1) nogil:
    """See the documentation for scipy.special.ellipeinc"""
    cdef double res
    res = _func_ellie(x0, x1)
    return res

cpdef double ellipkinc(double x0, double x1) nogil:
    """See the documentation for scipy.special.ellipkinc"""
    cdef double res
    res = _func_ellik(x0, x1)
    return res

cpdef double ellipkm1(double x0) nogil:
    """See the documentation for scipy.special.ellipkm1"""
    cdef double res
    res = _func_ellpk(x0)
    return res

cpdef double entr(double x0) nogil:
    """See the documentation for scipy.special.entr"""
    cdef double res
    res = _func_entr(x0)
    return res

cpdef Dd_number_t erf(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.erf"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_erf(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_erf)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t erfc(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.erfc"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_erfc(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_erfc)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t erfcx(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.erfcx"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = (<double(*)(double) nogil>scipy.special._ufuncs_cxx._export_faddeeva_erfcx)(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_erfcx_complex)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t erfi(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.erfi"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = (<double(*)(double) nogil>scipy.special._ufuncs_cxx._export_faddeeva_erfi)(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_erfi_complex)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_chebyc(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_chebyc"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_chebyc[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_chebyc[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_chebyc_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_chebys(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_chebys"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_chebys[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_chebys[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_chebys_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_chebyt(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_chebyt"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_chebyt[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_chebyt[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_chebyt_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_chebyu(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_chebyu"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_chebyu[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_chebyu[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_chebyu_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_gegenbauer(dl_number_t x0, double x1, Dd_number_t x2) nogil:
    """See the documentation for scipy.special.eval_gegenbauer"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_gegenbauer[double](x0, x1, x2)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_gegenbauer[double_complex](x0, x1, x2)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_gegenbauer_l(x0, x1, x2)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_genlaguerre(dl_number_t x0, double x1, Dd_number_t x2) nogil:
    """See the documentation for scipy.special.eval_genlaguerre"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_genlaguerre[double](x0, x1, x2)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_genlaguerre[double_complex](x0, x1, x2)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_genlaguerre_l(x0, x1, x2)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double eval_hermite(long x0, double x1) nogil:
    """See the documentation for scipy.special.eval_hermite"""
    cdef double res
    res = _func_eval_hermite(x0, x1)
    return res

cpdef double eval_hermitenorm(long x0, double x1) nogil:
    """See the documentation for scipy.special.eval_hermitenorm"""
    cdef double res
    res = _func_eval_hermitenorm(x0, x1)
    return res

cpdef Dd_number_t eval_jacobi(dl_number_t x0, double x1, double x2, Dd_number_t x3) nogil:
    """See the documentation for scipy.special.eval_jacobi"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_jacobi[double](x0, x1, x2, x3)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_jacobi[double_complex](x0, x1, x2, x3)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_jacobi_l(x0, x1, x2, x3)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_laguerre(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_laguerre"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_laguerre[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_laguerre[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_laguerre_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_legendre(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_legendre"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_legendre[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_legendre[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_legendre_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_sh_chebyt(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_sh_chebyt"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_sh_chebyt[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_sh_chebyt[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_sh_chebyt_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_sh_chebyu(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_sh_chebyu"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_sh_chebyu[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_sh_chebyu[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_sh_chebyu_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_sh_jacobi(dl_number_t x0, double x1, double x2, Dd_number_t x3) nogil:
    """See the documentation for scipy.special.eval_sh_jacobi"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_sh_jacobi[double](x0, x1, x2, x3)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_sh_jacobi[double_complex](x0, x1, x2, x3)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_sh_jacobi_l(x0, x1, x2, x3)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t eval_sh_legendre(dl_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.eval_sh_legendre"""
    cdef Dd_number_t res
    if dl_number_t is double and Dd_number_t is double:
        res = _func_eval_sh_legendre[double](x0, x1)
    elif dl_number_t is double and Dd_number_t is double_complex:
        res = _func_eval_sh_legendre[double_complex](x0, x1)
    elif dl_number_t is long and Dd_number_t is double:
        res = _func_eval_sh_legendre_l(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t exp1(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.exp1"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_exp1_wrap(x0)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cexp1_wrap(_complexstuff.npy_cdouble_from_double_complex(x0)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double exp10(double x0) nogil:
    """See the documentation for scipy.special.exp10"""
    cdef double res
    res = _func_exp10(x0)
    return res

cpdef double exp2(double x0) nogil:
    """See the documentation for scipy.special.exp2"""
    cdef double res
    res = _func_exp2(x0)
    return res

cpdef Dd_number_t expi(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.expi"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_expi_wrap(x0)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cexpi_wrap(_complexstuff.npy_cdouble_from_double_complex(x0)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef dfg_number_t expit(dfg_number_t x0) nogil:
    """See the documentation for scipy.special.expit"""
    cdef dfg_number_t res
    if dfg_number_t is float:
        res = _func_expitf(x0)
    elif dfg_number_t is double:
        res = _func_expit(x0)
    elif dfg_number_t is long_double:
        res = _func_expitl(x0)
    else:
        if dfg_number_t is double:
            res = NPY_NAN
        elif dfg_number_t is float:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t expm1(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.expm1"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_expm1(x0)
    elif Dd_number_t is double_complex:
        res = _func_cexpm1(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double expn(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.expn"""
    cdef double res
    if di_number_t is int:
        res = _func_expn(x0, x1)
    elif di_number_t is double:
        res = _func_expn_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef double exprel(double x0) nogil:
    """See the documentation for scipy.special.exprel"""
    cdef double res
    res = _func_exprel(x0)
    return res

cpdef double fdtr(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.fdtr"""
    cdef double res
    res = _func_fdtr(x0, x1, x2)
    return res

cpdef double fdtrc(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.fdtrc"""
    cdef double res
    res = _func_fdtrc(x0, x1, x2)
    return res

cpdef double fdtri(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.fdtri"""
    cdef double res
    res = _func_fdtri(x0, x1, x2)
    return res

cpdef double fdtridfd(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.fdtridfd"""
    cdef double res
    res = _func_cdff4_wrap(x0, x1, x2)
    return res

cpdef Dd_number_t gamma(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.gamma"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_Gamma(x0)
    elif Dd_number_t is double_complex:
        res = _func_cgamma(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double gammainc(double x0, double x1) nogil:
    """See the documentation for scipy.special.gammainc"""
    cdef double res
    res = _func_igam(x0, x1)
    return res

cpdef double gammaincc(double x0, double x1) nogil:
    """See the documentation for scipy.special.gammaincc"""
    cdef double res
    res = _func_igamc(x0, x1)
    return res

cpdef double gammainccinv(double x0, double x1) nogil:
    """See the documentation for scipy.special.gammainccinv"""
    cdef double res
    res = _func_igami(x0, x1)
    return res

cpdef double gammaincinv(double x0, double x1) nogil:
    """See the documentation for scipy.special.gammaincinv"""
    cdef double res
    res = _func_gammaincinv(x0, x1)
    return res

cpdef double gammasgn(double x0) nogil:
    """See the documentation for scipy.special.gammasgn"""
    cdef double res
    res = _func_gammasgn(x0)
    return res

cpdef double gdtr(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.gdtr"""
    cdef double res
    res = _func_gdtr(x0, x1, x2)
    return res

cpdef double gdtrc(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.gdtrc"""
    cdef double res
    res = _func_gdtrc(x0, x1, x2)
    return res

cpdef double gdtria(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.gdtria"""
    cdef double res
    res = _func_cdfgam4_wrap(x0, x1, x2)
    return res

cpdef double gdtrib(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.gdtrib"""
    cdef double res
    res = _func_cdfgam3_wrap(x0, x1, x2)
    return res

cpdef double gdtrix(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.gdtrix"""
    cdef double res
    res = _func_cdfgam2_wrap(x0, x1, x2)
    return res

cpdef double complex hankel1(double x0, double complex x1) nogil:
    """See the documentation for scipy.special.hankel1"""
    cdef double complex res
    res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesh_wrap1(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    return res

cpdef double complex hankel1e(double x0, double complex x1) nogil:
    """See the documentation for scipy.special.hankel1e"""
    cdef double complex res
    res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesh_wrap1_e(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    return res

cpdef double complex hankel2(double x0, double complex x1) nogil:
    """See the documentation for scipy.special.hankel2"""
    cdef double complex res
    res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesh_wrap2(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    return res

cpdef double complex hankel2e(double x0, double complex x1) nogil:
    """See the documentation for scipy.special.hankel2e"""
    cdef double complex res
    res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesh_wrap2_e(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    return res

cpdef double huber(double x0, double x1) nogil:
    """See the documentation for scipy.special.huber"""
    cdef double res
    res = _func_huber(x0, x1)
    return res

cpdef Dd_number_t hyp0f1(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.hyp0f1"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func__hyp0f1_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _func__hyp0f1_cmplx(x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t hyp1f1(double x0, double x1, Dd_number_t x2) nogil:
    """See the documentation for scipy.special.hyp1f1"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_hyp1f1_wrap(x0, x1, x2)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_chyp1f1_wrap(x0, x1, _complexstuff.npy_cdouble_from_double_complex(x2)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t hyp2f1(double x0, double x1, double x2, Dd_number_t x3) nogil:
    """See the documentation for scipy.special.hyp2f1"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_hyp2f1(x0, x1, x2, x3)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_chyp2f1_wrap(x0, x1, x2, _complexstuff.npy_cdouble_from_double_complex(x3)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double hyperu(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.hyperu"""
    cdef double res
    res = _func_hypU_wrap(x0, x1, x2)
    return res

cpdef double i0(double x0) nogil:
    """See the documentation for scipy.special.i0"""
    cdef double res
    res = _func_i0(x0)
    return res

cpdef double i0e(double x0) nogil:
    """See the documentation for scipy.special.i0e"""
    cdef double res
    res = _func_i0e(x0)
    return res

cpdef double i1(double x0) nogil:
    """See the documentation for scipy.special.i1"""
    cdef double res
    res = _func_i1(x0)
    return res

cpdef double i1e(double x0) nogil:
    """See the documentation for scipy.special.i1e"""
    cdef double res
    res = _func_i1e(x0)
    return res

cpdef double inv_boxcox(double x0, double x1) nogil:
    """See the documentation for scipy.special.inv_boxcox"""
    cdef double res
    res = _func_inv_boxcox(x0, x1)
    return res

cpdef double inv_boxcox1p(double x0, double x1) nogil:
    """See the documentation for scipy.special.inv_boxcox1p"""
    cdef double res
    res = _func_inv_boxcox1p(x0, x1)
    return res

cpdef double it2struve0(double x0) nogil:
    """See the documentation for scipy.special.it2struve0"""
    cdef double res
    res = _func_it2struve0_wrap(x0)
    return res

cpdef double itmodstruve0(double x0) nogil:
    """See the documentation for scipy.special.itmodstruve0"""
    cdef double res
    res = _func_itmodstruve0_wrap(x0)
    return res

cpdef double itstruve0(double x0) nogil:
    """See the documentation for scipy.special.itstruve0"""
    cdef double res
    res = _func_itstruve0_wrap(x0)
    return res

cpdef Dd_number_t iv(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.iv"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_iv(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesi_wrap(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t ive(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.ive"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesi_wrap_e_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesi_wrap_e(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double j0(double x0) nogil:
    """See the documentation for scipy.special.j0"""
    cdef double res
    res = _func_j0(x0)
    return res

cpdef double j1(double x0) nogil:
    """See the documentation for scipy.special.j1"""
    cdef double res
    res = _func_j1(x0)
    return res

cpdef Dd_number_t jv(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.jv"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesj_wrap_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesj_wrap(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t jve(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.jve"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesj_wrap_e_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesj_wrap_e(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double k0(double x0) nogil:
    """See the documentation for scipy.special.k0"""
    cdef double res
    res = _func_k0(x0)
    return res

cpdef double k0e(double x0) nogil:
    """See the documentation for scipy.special.k0e"""
    cdef double res
    res = _func_k0e(x0)
    return res

cpdef double k1(double x0) nogil:
    """See the documentation for scipy.special.k1"""
    cdef double res
    res = _func_k1(x0)
    return res

cpdef double k1e(double x0) nogil:
    """See the documentation for scipy.special.k1e"""
    cdef double res
    res = _func_k1e(x0)
    return res

cpdef double kei(double x0) nogil:
    """See the documentation for scipy.special.kei"""
    cdef double res
    res = _func_kei_wrap(x0)
    return res

cpdef double keip(double x0) nogil:
    """See the documentation for scipy.special.keip"""
    cdef double res
    res = _func_keip_wrap(x0)
    return res

cpdef double ker(double x0) nogil:
    """See the documentation for scipy.special.ker"""
    cdef double res
    res = _func_ker_wrap(x0)
    return res

cpdef double kerp(double x0) nogil:
    """See the documentation for scipy.special.kerp"""
    cdef double res
    res = _func_kerp_wrap(x0)
    return res

cpdef double kl_div(double x0, double x1) nogil:
    """See the documentation for scipy.special.kl_div"""
    cdef double res
    res = _func_kl_div(x0, x1)
    return res

cpdef double kn(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.kn"""
    cdef double res
    if di_number_t is int:
        res = _func_cbesk_wrap_real_int(x0, x1)
    elif di_number_t is double:
        res = _func_kn_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef double kolmogi(double x0) nogil:
    """See the documentation for scipy.special.kolmogi"""
    cdef double res
    res = _func_kolmogi(x0)
    return res

cpdef double kolmogorov(double x0) nogil:
    """See the documentation for scipy.special.kolmogorov"""
    cdef double res
    res = _func_kolmogorov(x0)
    return res

cpdef Dd_number_t kv(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.kv"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesk_wrap_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesk_wrap(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t kve(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.kve"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesk_wrap_e_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesk_wrap_e(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t log1p(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.log1p"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_log1p(x0)
    elif Dd_number_t is double_complex:
        res = _func_clog1p(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t log_ndtr(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.log_ndtr"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_log_ndtr(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_log_ndtr)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double complex loggamma(double complex x0) nogil:
    """See the documentation for scipy.special.loggamma"""
    cdef double complex res
    res = _func_loggamma(x0)
    return res

cpdef dfg_number_t logit(dfg_number_t x0) nogil:
    """See the documentation for scipy.special.logit"""
    cdef dfg_number_t res
    if dfg_number_t is float:
        res = _func_logitf(x0)
    elif dfg_number_t is double:
        res = _func_logit(x0)
    elif dfg_number_t is long_double:
        res = _func_logitl(x0)
    else:
        if dfg_number_t is double:
            res = NPY_NAN
        elif dfg_number_t is float:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double lpmv(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.lpmv"""
    cdef double res
    res = _func_pmv_wrap(x0, x1, x2)
    return res

cpdef double mathieu_a(double x0, double x1) nogil:
    """See the documentation for scipy.special.mathieu_a"""
    cdef double res
    res = _func_cem_cva_wrap(x0, x1)
    return res

cpdef double mathieu_b(double x0, double x1) nogil:
    """See the documentation for scipy.special.mathieu_b"""
    cdef double res
    res = _func_sem_cva_wrap(x0, x1)
    return res

cpdef double modstruve(double x0, double x1) nogil:
    """See the documentation for scipy.special.modstruve"""
    cdef double res
    res = _func_struve_l(x0, x1)
    return res

cpdef double nbdtr(di_number_t x0, di_number_t x1, double x2) nogil:
    """See the documentation for scipy.special.nbdtr"""
    cdef double res
    if di_number_t is int:
        res = _func_nbdtr(x0, x1, x2)
    elif di_number_t is double:
        res = _func_nbdtr_unsafe(x0, x1, x2)
    else:
        res = NPY_NAN
    return res

cpdef double nbdtrc(di_number_t x0, di_number_t x1, double x2) nogil:
    """See the documentation for scipy.special.nbdtrc"""
    cdef double res
    if di_number_t is int:
        res = _func_nbdtrc(x0, x1, x2)
    elif di_number_t is double:
        res = _func_nbdtrc_unsafe(x0, x1, x2)
    else:
        res = NPY_NAN
    return res

cpdef double nbdtri(di_number_t x0, di_number_t x1, double x2) nogil:
    """See the documentation for scipy.special.nbdtri"""
    cdef double res
    if di_number_t is int:
        res = _func_nbdtri(x0, x1, x2)
    elif di_number_t is double:
        res = _func_nbdtri_unsafe(x0, x1, x2)
    else:
        res = NPY_NAN
    return res

cpdef double nbdtrik(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nbdtrik"""
    cdef double res
    res = _func_cdfnbn2_wrap(x0, x1, x2)
    return res

cpdef double nbdtrin(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nbdtrin"""
    cdef double res
    res = _func_cdfnbn3_wrap(x0, x1, x2)
    return res

cpdef double ncfdtr(double x0, double x1, double x2, double x3) nogil:
    """See the documentation for scipy.special.ncfdtr"""
    cdef double res
    res = _func_cdffnc1_wrap(x0, x1, x2, x3)
    return res

cpdef double ncfdtri(double x0, double x1, double x2, double x3) nogil:
    """See the documentation for scipy.special.ncfdtri"""
    cdef double res
    res = _func_cdffnc2_wrap(x0, x1, x2, x3)
    return res

cpdef double ncfdtridfd(double x0, double x1, double x2, double x3) nogil:
    """See the documentation for scipy.special.ncfdtridfd"""
    cdef double res
    res = _func_cdffnc4_wrap(x0, x1, x2, x3)
    return res

cpdef double ncfdtridfn(double x0, double x1, double x2, double x3) nogil:
    """See the documentation for scipy.special.ncfdtridfn"""
    cdef double res
    res = _func_cdffnc3_wrap(x0, x1, x2, x3)
    return res

cpdef double ncfdtrinc(double x0, double x1, double x2, double x3) nogil:
    """See the documentation for scipy.special.ncfdtrinc"""
    cdef double res
    res = _func_cdffnc5_wrap(x0, x1, x2, x3)
    return res

cpdef double nctdtr(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nctdtr"""
    cdef double res
    res = _func_cdftnc1_wrap(x0, x1, x2)
    return res

cpdef double nctdtridf(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nctdtridf"""
    cdef double res
    res = _func_cdftnc3_wrap(x0, x1, x2)
    return res

cpdef double nctdtrinc(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nctdtrinc"""
    cdef double res
    res = _func_cdftnc4_wrap(x0, x1, x2)
    return res

cpdef double nctdtrit(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nctdtrit"""
    cdef double res
    res = _func_cdftnc2_wrap(x0, x1, x2)
    return res

cpdef Dd_number_t ndtr(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.ndtr"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_ndtr(x0)
    elif Dd_number_t is double_complex:
        res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_ndtr)(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double ndtri(double x0) nogil:
    """See the documentation for scipy.special.ndtri"""
    cdef double res
    res = _func_ndtri(x0)
    return res

cpdef double nrdtrimn(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nrdtrimn"""
    cdef double res
    res = _func_cdfnor3_wrap(x0, x1, x2)
    return res

cpdef double nrdtrisd(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.nrdtrisd"""
    cdef double res
    res = _func_cdfnor4_wrap(x0, x1, x2)
    return res

cpdef double obl_cv(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.obl_cv"""
    cdef double res
    res = _func_oblate_segv_wrap(x0, x1, x2)
    return res

cpdef double pdtr(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.pdtr"""
    cdef double res
    if di_number_t is int:
        res = _func_pdtr(x0, x1)
    elif di_number_t is double:
        res = _func_pdtr_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef double pdtrc(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.pdtrc"""
    cdef double res
    if di_number_t is int:
        res = _func_pdtrc(x0, x1)
    elif di_number_t is double:
        res = _func_pdtrc_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef double pdtri(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.pdtri"""
    cdef double res
    if di_number_t is int:
        res = _func_pdtri(x0, x1)
    elif di_number_t is double:
        res = _func_pdtri_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef double pdtrik(double x0, double x1) nogil:
    """See the documentation for scipy.special.pdtrik"""
    cdef double res
    res = _func_cdfpoi2_wrap(x0, x1)
    return res

cpdef double poch(double x0, double x1) nogil:
    """See the documentation for scipy.special.poch"""
    cdef double res
    res = _func_poch(x0, x1)
    return res

cpdef double pro_cv(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.pro_cv"""
    cdef double res
    res = _func_prolate_segv_wrap(x0, x1, x2)
    return res

cpdef double pseudo_huber(double x0, double x1) nogil:
    """See the documentation for scipy.special.pseudo_huber"""
    cdef double res
    res = _func_pseudo_huber(x0, x1)
    return res

cpdef Dd_number_t psi(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.psi"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_digamma(x0)
    elif Dd_number_t is double_complex:
        res = _func_cdigamma(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double radian(double x0, double x1, double x2) nogil:
    """See the documentation for scipy.special.radian"""
    cdef double res
    res = _func_radian(x0, x1, x2)
    return res

cpdef double rel_entr(double x0, double x1) nogil:
    """See the documentation for scipy.special.rel_entr"""
    cdef double res
    res = _func_rel_entr(x0, x1)
    return res

cpdef Dd_number_t rgamma(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.rgamma"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_rgamma(x0)
    elif Dd_number_t is double_complex:
        res = _func_crgamma(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double round(double x0) nogil:
    """See the documentation for scipy.special.round"""
    cdef double res
    res = _func_round(x0)
    return res

cpdef double sindg(double x0) nogil:
    """See the documentation for scipy.special.sindg"""
    cdef double res
    res = _func_sindg(x0)
    return res

cpdef double smirnov(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.smirnov"""
    cdef double res
    if di_number_t is int:
        res = _func_smirnov(x0, x1)
    elif di_number_t is double:
        res = _func_smirnov_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef double smirnovi(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.smirnovi"""
    cdef double res
    if di_number_t is int:
        res = _func_smirnovi(x0, x1)
    elif di_number_t is double:
        res = _func_smirnovi_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef Dd_number_t spence(Dd_number_t x0) nogil:
    """See the documentation for scipy.special.spence"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_spence(x0)
    elif Dd_number_t is double_complex:
        res = _func_cspence(x0)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double complex sph_harm(di_number_t x0, di_number_t x1, double x2, double x3) nogil:
    """See the documentation for scipy.special.sph_harm"""
    cdef double complex res
    if di_number_t is int:
        res = _func_sph_harmonic(x0, x1, x2, x3)
    elif di_number_t is double:
        res = _func_sph_harmonic_unsafe(x0, x1, x2, x3)
    else:
        res = NPY_NAN
    return res

cpdef double stdtr(double x0, double x1) nogil:
    """See the documentation for scipy.special.stdtr"""
    cdef double res
    res = _func_cdft1_wrap(x0, x1)
    return res

cpdef double stdtridf(double x0, double x1) nogil:
    """See the documentation for scipy.special.stdtridf"""
    cdef double res
    res = _func_cdft3_wrap(x0, x1)
    return res

cpdef double stdtrit(double x0, double x1) nogil:
    """See the documentation for scipy.special.stdtrit"""
    cdef double res
    res = _func_cdft2_wrap(x0, x1)
    return res

cpdef double struve(double x0, double x1) nogil:
    """See the documentation for scipy.special.struve"""
    cdef double res
    res = _func_struve_h(x0, x1)
    return res

cpdef double tandg(double x0) nogil:
    """See the documentation for scipy.special.tandg"""
    cdef double res
    res = _func_tandg(x0)
    return res

cpdef double tklmbda(double x0, double x1) nogil:
    """See the documentation for scipy.special.tklmbda"""
    cdef double res
    res = _func_tukeylambdacdf(x0, x1)
    return res

cpdef double complex wofz(double complex x0) nogil:
    """See the documentation for scipy.special.wofz"""
    cdef double complex res
    res = (<double complex(*)(double complex) nogil>scipy.special._ufuncs_cxx._export_faddeeva_w)(x0)
    return res

cpdef Dd_number_t xlog1py(Dd_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.xlog1py"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_xlog1py[double](x0, x1)
    elif Dd_number_t is double_complex:
        res = _func_xlog1py[double_complex](x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t xlogy(Dd_number_t x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.xlogy"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_xlogy[double](x0, x1)
    elif Dd_number_t is double_complex:
        res = _func_xlogy[double_complex](x0, x1)
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double y0(double x0) nogil:
    """See the documentation for scipy.special.y0"""
    cdef double res
    res = _func_y0(x0)
    return res

cpdef double y1(double x0) nogil:
    """See the documentation for scipy.special.y1"""
    cdef double res
    res = _func_y1(x0)
    return res

cpdef double yn(di_number_t x0, double x1) nogil:
    """See the documentation for scipy.special.yn"""
    cdef double res
    if di_number_t is int:
        res = _func_yn(x0, x1)
    elif di_number_t is double:
        res = _func_yn_unsafe(x0, x1)
    else:
        res = NPY_NAN
    return res

cpdef Dd_number_t yv(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.yv"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesy_wrap_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesy_wrap(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef Dd_number_t yve(double x0, Dd_number_t x1) nogil:
    """See the documentation for scipy.special.yve"""
    cdef Dd_number_t res
    if Dd_number_t is double:
        res = _func_cbesy_wrap_e_real(x0, x1)
    elif Dd_number_t is double_complex:
        res = _complexstuff.double_complex_from_npy_cdouble(_func_cbesy_wrap_e(x0, _complexstuff.npy_cdouble_from_double_complex(x1)))
    else:
        if Dd_number_t is double_complex:
            res = NPY_NAN
        else:
            res = NPY_NAN
    return res

cpdef double zetac(double x0) nogil:
    """See the documentation for scipy.special.zetac"""
    cdef double res
    res = _func_zetac(x0)
    return res

def _bench_jv_dd_py(int N):
    cdef int n
    cdef double x0 = 1
    cdef double x1 = 1
    for n in range(N):
        _ufuncs.jv(x0, x1)

def _bench_jv_dd_cy(int N):
    cdef int n
    cdef double x0 = 1
    cdef double x1 = 1
    for n in range(N):
        jv(x0, x1)

def _bench_jv_dD_py(int N):
    cdef int n
    cdef double x0 = 1
    cdef double complex x1 = 1
    for n in range(N):
        _ufuncs.jv(x0, x1)

def _bench_jv_dD_cy(int N):
    cdef int n
    cdef double x0 = 1
    cdef double complex x1 = 1
    for n in range(N):
        jv(x0, x1)